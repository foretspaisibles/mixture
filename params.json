{"name":"Mixture","tagline":"A comprehensive mixins library for OCaml's module system.","body":"# Mixture, a mixins library for OCaml\r\n\r\nThe **Mixture** project provides a comprehensive mixins library for\r\nthe OCaml module system.\r\n\r\n[![Build Status](https://travis-ci.org/michipili/mixture.svg?branch=master)](https://travis-ci.org/michipili/mixture?branch=master)\r\n\r\n\r\n## Example usage of mixins\r\n\r\nThe *Mixture_Compare* module defines a mixin which derives all\r\nclassical comparison operators (in prefix and infox form) from a\r\n*compare* function.  For instance\r\n\r\n```ocaml\r\nmodule PlayingCard =\r\nstruct\r\n  type card =\r\n  | Card of regular\r\n  | Joker\r\n  and regular = { suit : card_suit; name : card_name; }\r\n  and card_suit = Heart | Club | Spade | Diamond\r\n  and card_name =  Ace | King | Queen | Jack | Simple of int\r\n\r\n  module Basis =\r\n  struct\r\n    type t = card\r\n    let compare = Pervasives.compare\r\n  end\r\n\r\n  module CompareMethods =\r\n    Mixture_Compare.Make(Basis)\r\n\r\n  include Basis\r\n  include CompareMethods\r\nend\r\n```\r\n\r\nThe module *PlayingCard* has prefix and infix comparison operators\r\nderived from *compare* so, if *a* and *b* are cards, one can write\r\n`PlayingCard.lt a b` or equivalently `PlayingCard.Infix.(a < b)`.\r\n\r\n\r\n## Provided mixins\r\n\r\nThe growing list of mixins defined in the library is:\r\n\r\n- *Mixture_Applicative*\r\n- *Mixture_Compare*\r\n- *Mixture_Format*\r\n- *Mixture_Parse*\r\n- *Mixture_Monad*\r\n- *Mixture_FoldRight*\r\n- *Mixture_FoldAssoc*\r\n\r\n\r\n## Free software\r\n\r\nIt is written by Michael Grünewald and is distributed as a free\r\nsoftware: copying it  and redistributing it is\r\nvery much welcome under conditions of the [CeCILL-B][licence-url]\r\nlicence agreement, found in the [COPYING][licence-en] and\r\n[COPYING-FR][licence-fr] files of the distribution.\r\n\r\n\r\n## Setup guide\r\n\r\nThe installation procedure is based on the portable build system\r\n[BSD Owl Scripts][bsdowl-home] based on BSD Make.\r\n\r\n1. Verify that prerequisites are installed:\r\n   - BSD Make\r\n   - [BSD OWl][bsdowl-install]\r\n   - OCaml\r\n   - [Broken][broken-home]\r\n   - GNU Autoconf\r\n\r\n2. Get the source, either by cloning the repository or by exploding a\r\n   [distribution tarball](releases).\r\n\r\n3. Optionally run `autoconf` to produce a configuration script. This\r\n   is only required if the script is not already present.\r\n\r\n4. Run `./configure`, you can choose the installation prefix with\r\n   `--prefix`.\r\n\r\n5. Run `make build`.\r\n\r\n6. Optionally run `make test` to test your build.\r\n\r\n7. Finally run `make install`.\r\n\r\nDepending on how **BSD Make** is called on your system, you may need to\r\nreplace `make` by `bsdmake` or `bmake` in steps 5, 6, and 7.\r\nThe **GNU Make** program usually give up the ghost, croaking\r\n`*** missing separator. Stop.` when you mistakingly use it instead of\r\n**BSD Make**.\r\n\r\nStep 7 requires that you can `su -` if you are not already `root`.\r\n\r\n\r\nMichael Grünewald in Bonn, on August 11, 2015\r\n\r\n  [licence-url]:        http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html\r\n  [licence-en]:         COPYING\r\n  [licence-fr]:         COPYING-FR\r\n  [bsdowl-home]:        https://github.com/michipili/bsdowl\r\n  [bsdowl-install]:     https://github.com/michipili/bsdowl/wiki/Install\r\n  [broken-home]:        https://github.com/michipili/broken\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}